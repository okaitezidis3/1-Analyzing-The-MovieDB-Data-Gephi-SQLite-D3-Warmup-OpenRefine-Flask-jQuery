-- Setup. DO NOT REMOVE.
.headers on
.mode list
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE movies(
    'id' int,
    'name' text,
    'score' int
);

CREATE TABLE cast(
    'movie_id' int,
    'cast_id' int,
    'cast_name' text
);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]
.separator ','
.import ./movie-name-score.txt movies
.import ./movie-cast.txt cast

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]
CREATE INDEX scores_index ON movies (score);
CREATE INDEX cast_index ON cast (cast_id);
CREATE INDEX movie_index ON movies (id);



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate average score

-- [insert your SQL statement(s) BELOW this line]
SELECT AVG(score) as average_score
FROM movies
WHERE score >= 5;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find poor movies

-- [insert your SQL statement(s) BELOW this line]
SELECT id,name,score
FROM movies
ORDER BY score,name
LIMIT 5;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find laid back actors

-- [insert your SQL statement(s) BELOW this line]
SELECT cast_id,cast_name,COUNT(cast_name) as movie_count
FROM movies
INNER JOIN cast
ON 'movies'.id = 'cast'.movie_id
GROUP BY cast_id
HAVING movie_count = 2
ORDER BY cast_name
LIMIT 10;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]
SELECT cast_id, cast_name, average_score FROM (
    SELECT cast_id, cast_name, avg(movies.score) as average_score, count(movies.id) as movie_cnt FROM `cast`
    JOIN movies ON(`cast`.movie_id = movies.id)
    WHERE score >= 40
    GROUP BY `cast`.cast_id
    ORDER BY average_score DESC, `cast`.cast_name
) WHERE movie_cnt > 2 LIMIT 10;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views


-- [insert your SQL statement(s) BELOW this line]
CREATE VIEW good_collaboration AS
SELECT fir.cast_id AS cast_member_id1, sec.cast_id AS cast_member_id2, count(fir.movie_id) AS movie_count, avg(fir.score) AS average_movie_score
FROM
(SELECT * FROM movies INNER JOIN cast ON movies.id = 'cast'.movie_id) fir JOIN
(SELECT * FROM movies INNER JOIN cast ON movies.id = 'cast'.movie_id) sec
ON fir.cast_id <> sec.cast_id AND fir.movie_id = sec.movie_id  AND fir.cast_id < sec.cast_id
GROUP BY fir.cast_id, sec.cast_id
HAVING count(fir.movie_id)>2 AND avg(fir.score)>=50;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]
SELECT cast_member_id1 AS cast_id, cast_name, average_movie_score AS collaboration_score
FROM
    (SELECT cast_member_id1, average_movie_score FROM good_collaboration
    UNION ALL
    SELECT cast_member_id2, average_movie_score FROM good_collaboration) UA
JOIN cast ON (UA.cast_member_id1 = cast_id)
GROUP BY UA.cast_member_id1
ORDER BY average_movie_score DESC, cast_name ASC
LIMIT 5;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]
CREATE VIRTUAL TABLE movie_overview USING fts4(
    id integer,
    name text,
    year integer,
    overview text,
    popularity decimal
);

.separator ','
.import ./movie-overview.txt movie_overview

-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]
SELECT count(*) as count_overview
FROM movie_overview
WHERE overview MATCH 'fight';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT id as count_overview
FROM movie_overview
WHERE overview MATCH 'love NEAR/5 story';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --
